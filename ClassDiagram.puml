@startuml
skinparam classAttributeIconSize 0
'https://plantuml.com/class-diagram

abstract class Grid{
    - size : int
    - regions: List<Region>
    + Grid(size : int, regions: List<Region>)
    + {abstract} isValid(row : int, col : int, value : int) : boolean
    + {abstract} solve() : boolean
    + display() : void
    + setValue(row : int, col : int, value : int) : void
    + getValue(row : int, col : int) : int
    + getRegionsForCell(row: int, col: int): List<Region>
    + DisplayGrid()
}

class Region {
    - id: String
    - cells: List<Cell>
    +Region(cell: List<Cell>)
    + addCell(cell: Cell)
}

class Cell {
    -value : <E>
    -x : int
    -y : int
    - linkedGrids: List<Grid>
    +Cell(value,x,y)
}

class ClassicSudokuGrid{
    + ClassicSudokuGrid()
    + isValid(row : int, col : int, value : int) : boolean
    + solve() : boolean
}

class MultidokuGrid{
    - sharedCells: List<Cell>
    + MultidokuGrid()
    + addSharedCell(cell: Cell)
    + isValid(row : int, col : int, value : int) : boolean
    + solve() : boolean
}

abstract class Rule {
    + applyRule(grid: Grid): boolean
}
class ExclusionDirecte extends Rule {
    + applyRule(grid: Grid): boolean
}
class PairesExclusives extends Rule {
    + applyRule(grid: Grid): boolean
}
class UniciteForcee extends Rule {
    + applyRule(grid: Grid): boolean
}

enum Difficulte{
    FACILE
    MOYEN
    DIFFICILE
}

Generator --> Difficulte

class Generator {
    Difficulte difficulte
    + Generator(Difficulte difficulte)
    +GeneratePuzzle(Grid grid, Difficulte difficulte): Grid
}
Generator ..> Grid

class MenuTextuel {
    - solver: SolverStrategy
    + setSolver(SolverStrategy solver): void
    +LoadGrid(grid: Grid)
    +ChoisirMethodeResolution(grid: Grid, SolverStrategy method, AfficherLogs : boolean) : Grid
    +GenererGrille(Grid grid, Difficulte difficulteChoisie): Grid
    +LoadMenuTextuel()
}

MenuTextuel ..> SolverStrategy

class RuleBasedSolver {
    - rules: List<Rule>
    + addRule(rule: Rule): void
}

class BacktrackingSolver {
    +findEmptyCell()
}

class HybridSolver {
    - ruleSolver: RuleBasedSolver
    - backtrackSolver: BacktrackingSolver
}

class Logger {
    - logs: List<String>
    + log(step: String): void
    + exportLogs(): void
    + clearLogs(): void
}

abstract class SolverStrategy {
    - logger: Logger
    SolverStrategy(logger: Logger)
    + solve(grid: Grid, AfficherLogs: boolean): boolean
    + getSteps(): List<String>
}

SolverStrategy --> Logger : utilise

Generator<--MenuTextuel

Grid <|-- MultidokuGrid
Grid <|-- ClassicSudokuGrid
Grid *-- Region
Grid <-- SolverStrategy

Generator ..> SolverStrategy

MultidokuGrid o-- "1 Ã  n" ClassicSudokuGrid

Region *-- Cell

SolverStrategy <|-- RuleBasedSolver
SolverStrategy <|-- HybridSolver
SolverStrategy <|-- BacktrackingSolver
RuleBasedSolver "1" *-- "1..*" Rule
HybridSolver --> RuleBasedSolver



@enduml