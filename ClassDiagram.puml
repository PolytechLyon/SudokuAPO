@startuml
skinparam classAttributeIconSize 0
'https://plantuml.com/class-diagram

abstract class Grid<E>{
    # size : int
    # regions: List<Region>
    # cells : Cell<E>[ ][ ]
    + Grid(size : int)
    + {abstract} isValid(row : int, col : int, value : <E>) : boolean
    + {abstract} getValue() : E
    + {abstract} setValue() : E
    + getRegions() : List<Region<E>>
    + addRegion()
    + getValuesForRow(y : int) : Set<E>
    + getSize() : int
    + getValuesForColumn
    + getCell(y : int, x : int)
}

class Region<E>{
    - id : String
    - cells : List<Cell<E>>
    + Region(id : int)
    + addCell(cell: Cell)
    + getCells : List<Cell<E>>
    + containsCell(y : int, x : int) : boolean
}

class Cell<E> {
    -value : E
    -x : int
    -y : int
    -possibleValues : Set<E>
    +Cell(value,x,y)
    +getPossibleValues() Set<E>
    +removePossibleValue(value : E)
    +getValue() : E
    +setValue(value : E)
    +getY() : int
    +getX() : int
    +toString() : String
}

class ClassicSudokuGrid<E> {
    + ClassicSudokuGrid(size: int, possibleValues: Set<E>)
    + initializeRegions(): void
    + isValid(y: int, x: int, value: E): boolean
    + getValue(y: int, x: int): E
    + setValue(y: int, x: int, value: E): void
    + displayGrid(): void
}

class MultidokuGrid<E>{
    - sharedCells: List<Cell<E>>
    + MultidokuGrid(size : int)
    + addSharedCell(cell: Cell<E>)
    + isSharedCell(row : int, col : int) : boolean
    + isValid(row : int, col : int, value : <E>) : boolean
    + getValue(row : int, col : int) : <E>
    + setValue(row : int, col : int, value : <E>)
}

abstract class Rule<E> {
    #logger : Logger
    +Rule(Logger logger)
    + applyRule(grid: Grid): boolean
}
class ExclusionDirecte<E> extends Rule {
    + applyRule(grid<E>: Grid): boolean
    + ExclusionDirecte(logger Logger)
    + exclusionRegion(grid<E>: Grid): boolean
    + exclusionLigne(Grid<E> grid): boolean
    + exclusionColonne(Grid<E> grid): boolean
}
class PairesExclusives<E> extends Rule {
    + applyRule(grid: Grid): boolean
}
class UniciteForcee<E> extends Rule {
    + applyRule(grid: Grid): boolean
    + uniciteForceeRegion(Grid<E> grid): boolean
}

enum Difficulte{
    FACILE
    MOYEN
    DIFFICILE
    + getDescription(): String
}

Generator --> Difficulte

Abstract class Generator<E> {
    # Difficulte difficulte
    + Generator(Difficulte ChoixDifficulte)

}
Generator ..> Grid

class GenerateFromComputer<E> extends Generator{
    + GenerateFromComputer(difficulte: Difficulte)
    + GeneratePuzzle( grid: Grid<E>, difficulte: Difficulte): Grid<E>
    + isGridEmpty(grid: Grid<E>): boolean
    + generateSolvedGrid(grid: Grid<E>)
    + makeGridPlayable(grid: Grid<E>, Difficulte difficulte)
    + hasUniqueSolution(grid: Grid <E>): boolean
    + getShuffledCells(grid: Grid<E>): List<Cell<E>>
    + calculateCellsToRemove(difficulte Difficulte): int
}

class GenerateFromUser<E> extends Generator<E>{
    + GenerateFromUser(difficulte : Difficulte)
    + generateUserGrid() : Grid<E>
}

class MenuTextuel<E> {
    - solver : SolverStrategy<E>
    - userGrid : ClassicSudokuGrid<E>
    + MenuTextuel()
    + afficherMenuTextuel()
    + LoadGridFromUserInputAndSolve()
    + generateGridFromComputer()
    + chooseSolverFromUserInput : SolverStrategy<E>
    + solveGrid()
}

MenuTextuel --> SolverStrategy



class RuleBasedSolver<E> {
    - rules: List<Rule>
    + RuleBasedSolver(logger Logger)
    + addRule(rule: Rule<E>)
    + addRule(rule: Rule): void
    + solve(grid : Grid<E>, afficherLogs boolean)
}

class BacktrackingSolver<E> {
    +BackTrackingSolver(logger: Logger )
    +solve(grid : Grid<E>, afficherLogs : boolean)
    +solveBacktrack(grid : Grid<E>, afficherLogs : boolean)
    +findEmptyCell(grid : Grid<E>)
    +hasUniqueSolution : boolean
    +countSolutions : int
}

class HybridSolver {
    - ruleSolver: RuleBasedSolver
    - backtrackSolver: BacktrackingSolver
}

class Logger {
    - logs: List<String>
    + Logger()
    + log(step: String): void
    + exportLogs(): void
}

abstract class SolverStrategy<E> {
    - logger: Logger
    + SolverStrategy(logger: Logger)
    + abstract solve(grid: Grid<E>, AfficherLogs: boolean): boolean
    + getSteps(): List<String>
}

class SudokuModernGUI {
  - static final int GRID_SIZE : int
  - sudokuGrid : ClassicSudokuGrid<Character>
  - cellFields : JTextField[][]
  - gridPanel : JPanel
  - buttonPanel : JPanel
  - controlPanel : JPanel
  - sliderDifficulty : JSlider
  - sliderLabel : JLabel
  - btnSolve : JButton
  - btnGenerate : JButton
  - btnReset : JButton
  - btnToggleTheme : JButton
  - solverCombo : JComboBox<String>
  - darkTheme : boolean
  - logger : Logger
  - possibleValues : Set<Character>
  + MultidokuModernGUI()
  - initializePossibleValues() : void
  - initComponents() : void
  - styleButton(btn : JButton, bgColor : Color) : void
  - updateUIFromGrid() : void
  - updateTheme() : void
  - removeCells(count : int) : void
  + main(args : String[]) : void
}

SolverStrategy --> Logger : utilise

Generator<--MenuTextuel

Grid <|-- MultidokuGrid
Grid <|-- ClassicSudokuGrid
Grid *-- Region
Grid <-- SolverStrategy

GenerateFromComputer ..> SolverStrategy

MultidokuGrid o-- "1 Ãƒ  n" ClassicSudokuGrid

Region *-- Cell

SolverStrategy <|-- RuleBasedSolver
SolverStrategy <|-- HybridSolver
SolverStrategy <|-- BacktrackingSolver
RuleBasedSolver "1" *-- "1..*" Rule
HybridSolver --> RuleBasedSolver
SudokuModernGUI --> ClassicSudokuGrid
SudokuModernGUI --> Logger
SudokuModernGUI --> SolverStrategy




@enduml