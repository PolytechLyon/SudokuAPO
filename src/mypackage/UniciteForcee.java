package src.mypackage;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class UniciteForcee<E> extends Rule<E> {

    public UniciteForcee() {
        super();
    }

    @Override
    public boolean applyRule(Grid<E> grid) {
        boolean modified = false;

        // üî• Appliquer l'unicit√© forc√©e sur chaque r√©gion, ligne et colonne
        modified |= uniciteForceeRegion(grid);

        return modified;
    }

    /**
     * üî• R√®gle d'unicit√© forc√©e dans les r√©gions
     * Si une valeur n'est possible qu'√† un seul endroit d'une r√©gion, elle est plac√©e directement.
     */
    private boolean uniciteForceeRegion(Grid<E> grid) {
        boolean modified = false;

        for (Region<E> region : grid.getRegions()) {
            Map<E, Cell<E>> uniquePositions = new HashMap<>();
            Set<E> alreadyPlaced = new HashSet<>();

            // 1Ô∏è‚É£ Collecter les valeurs d√©j√† plac√©es
            for (Cell<E> cell : region.getCells()) {
                if (cell.getValue() != null) {
                    alreadyPlaced.add(cell.getValue());
                }
            }

            // 2Ô∏è‚É£ Trouver les valeurs uniques qui n'ont qu'une seule possibilit√©
            for (Cell<E> cell : region.getCells()) {
                if (cell.getValue() == null) {
                    for (E value : cell.getPossibleValues()) {
                        if (!alreadyPlaced.contains(value)) {
                            if (!uniquePositions.containsKey(value)) {
                                uniquePositions.put(value, cell);
                            } else {
                                uniquePositions.put(value, null); // ‚ö†Ô∏è Plus d'une possibilit√© -> Pas unique
                            }
                        }
                    }
                }
            }

            // 3Ô∏è‚É£ Affecter les valeurs uniques √† leur cellule correspondante
            for (Map.Entry<E, Cell<E>> entry : uniquePositions.entrySet()) {
                E value = entry.getKey();
                Cell<E> cell = entry.getValue();
                if (cell != null) { // ‚úÖ Valeur possible UNIQUEMENT dans cette cellule
                    cell.setValue(value);
                    cell.getPossibleValues().clear();
                    modified = true;
                }
            }
        }

        return modified;
    }

}