package src.mypackage;

public class BackTrackingSolver<E> extends SolverStrategy<E> {

    public BackTrackingSolver(Logger logger) {
        super(logger);
    }

    @Override
    public boolean solve(Grid<E> grid, boolean afficherLogs) {
        if (afficherLogs) {
            logger.log("üöÄ D√©but de la r√©solution avec Backtracking...");
        }
        boolean solved = solveBacktrack(grid, afficherLogs);

        if (afficherLogs) {
            if (solved) {
                logger.log("‚úÖ Sudoku r√©solu avec succ√®s !");
            } else {
                logger.log("‚ùå Aucune solution possible !");
            }
        }

        return solved;
    }

    /**
     * üî• Algorithme principal de Backtracking
     * Essaie de remplir les cellules vides avec des valeurs possibles
     */
    private boolean solveBacktrack(Grid<E> grid, boolean afficherLogs) {
        Cell<E> emptyCell = findEmptyCell(grid); // üîç Trouver une cellule vide
        if (emptyCell == null) return true; // ‚úÖ Sudoku r√©solu si plus de cellules vides

        int y = emptyCell.getY();
        int x = emptyCell.getX();

        if (afficherLogs) {
            logger.log("üîç Cellule vide trouv√©e en (" + y + ", " + x + ")");
            logger.log("üé≤ Valeurs possibles : " + emptyCell.getPossibleValues());
        }

        for (E value : emptyCell.getPossibleValues()) {  // üî• Essayer chaque valeur possible
            if (grid.isValid(y, x, value)) {
                emptyCell.setValue(value); // ‚úÖ Assigner une valeur temporaire

                if (afficherLogs) {
                    logger.log("‚úÖ " + value + " plac√© en (" + y + ", " + x + ")");
                }

                if (solveBacktrack(grid, afficherLogs)) { // üîÅ Continuer r√©cursivement
                    return true;
                }

                emptyCell.setValue(null); // ‚ùå Retour arri√®re
                if (afficherLogs) {
                    logger.log("‚Ü©Ô∏è Annulation : " + value + " retir√© de (" + y + ", " + x + ")");
                }
            }
        }

        if (afficherLogs) {
            logger.exportLogs();
        }


        return false; // ‚ùå Aucun choix valide ‚Üí retour arri√®re
    }

    /**
     * üìå Trouve une cellule vide dans la grille
     */
    private Cell<E> findEmptyCell(Grid<E> grid) {
        for (Region<E> region : grid.getRegions()) {
            for (Cell<E> cell : region.getCells()) {
                if (cell.getValue() == null) {
                    return cell; // üîç Retourne la premi√®re cellule vide trouv√©e
                }
            }
        }
        return null; // ‚úÖ Plus de cellules vides ‚Üí Sudoku r√©solu
    }
}
